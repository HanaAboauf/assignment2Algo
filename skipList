#include <bits/stdc++.h>
using namespace std;

class Node {
public:
    int value;
    string playerName;
    Node** forward;
    Node(int key, const string& name, int level) {
        value = key;
        playerName = name;
        forward = new Node*[level + 1];
        for (int i = 0; i <= level; i++) {
            forward[i] = nullptr;
        }
    }
    ~Node() {
        delete[] forward;
    }
};

class SkipList {
private:
    int maxLevel;
    int currentLevel;
    Node* header;

    int randomLevel() {
        int level = 0;
        while (rand() % 2 == 0 && level < maxLevel) {
            level++;
        }
        return level;
    }

public:
    SkipList(int maxLevel) {
        this->maxLevel = maxLevel;
        this->currentLevel = 0;
        header = new Node(INT_MIN, "", maxLevel);
        srand(time(0));
    }

    ~SkipList() {
        Node* current = header;
        while (current != nullptr) {
            Node* next = current->forward[0];
            delete current;
            current = next;
        }
    }

    void insert(int key, const string& playerName) {
        Node* current = header;
        Node* update[maxLevel + 1];
        for (int i = 0; i <= maxLevel; i++) {
            update[i] = nullptr;
        }

        for (int i = currentLevel; i >= 0; i--) {
            while (current->forward[i] != nullptr && current->forward[i]->value < key) {
                current = current->forward[i];
            }
            update[i] = current;
        }

        current = current->forward[0];

        if (current == nullptr || current->value != key) {
            int newLevel = randomLevel();
            if (newLevel > currentLevel) {
                for (int i = currentLevel + 1; i <= newLevel; i++) {
                    update[i] = header;
                }
                currentLevel = newLevel;
            }

            Node* newNode = new Node(key, playerName, newLevel);
            for (int i = 0; i <= newLevel; i++) {
                newNode->forward[i] = update[i]->forward[i];
                update[i]->forward[i] = newNode;
            }
        }
    }

    bool search(int key) {
        Node* current = header;
        for (int i = currentLevel; i >= 0; i--) {
            while (current->forward[i] != nullptr && current->forward[i]->value < key) {
                current = current->forward[i];
            }
        }

        current = current->forward[0];

        if (current != nullptr && current->value == key) {
            cout << "Found player: " << current->playerName << " with score: " << current->value << "\n";
            return true;
        }

        cout << "Player not found\n";
        return false;
    }

    void Delete(int key) {
        Node* update[maxLevel + 1];
        Node* current = header;

        for (int i = currentLevel; i >= 0; i--) {
            while (current->forward[i] != nullptr && current->forward[i]->value < key) {
                current = current->forward[i];
            }
            update[i] = current;
        }

        current = current->forward[0];

        if (current != nullptr && current->value == key) {
            for (int i = 0; i <= currentLevel; i++) {
                if (update[i]->forward[i] != current) {
                    break;
                }
                update[i]->forward[i] = current->forward[i];
            }

            while (currentLevel > 0 && header->forward[currentLevel] == nullptr) {
                currentLevel--;
            }

            delete current;
        }
    }

    void updateScore(const string& playerName, int newScore) {
        Node* current = header;
        Node* target = nullptr;

        // Find the node with the given player name
        for (int i = currentLevel; i >= 0; i--) {
            while (current->forward[i] != nullptr && current->forward[i]->playerName != playerName) {
                current = current->forward[i];
            }
            if (current->forward[i] != nullptr && current->forward[i]->playerName == playerName) {
                target = current->forward[i];
                break;
            }
        }

        if (target != nullptr) {
            int oldScore = target->value;
            Delete(oldScore);
            insert(newScore, playerName);
        } else {
            cout << "Player not found\n";
        }
    }

    void getTopNPlayers(int N) {
        vector<pair<int, string>> players;
        Node* current = header->forward[0];

        // Collect all players
        while (current != nullptr) {
            players.push_back({current->value, current->playerName});
            current = current->forward[0];
        }

        // Sort players by score in descending order
        sort(players.rbegin(), players.rend());

        // Print top N players
        for (int i = 0; i < N && i < players.size(); i++) {
            cout << players[i].second << " with score: " << players[i].first << "\n";
        }
    }

    void print() {
        for (int i = currentLevel; i >= 0; i--) {
            Node* node = header->forward[i];
            cout << "Level " << i << ": ";
            while (node != nullptr) {
                cout << node->playerName << " (" << node->value << ") ";
                node = node->forward[i];
            }
            cout << endl;
        }
    }
};

int main() {
    SkipList list(4);

    list.insert(100, "Alice");
    list.insert(200, "Bob");
    list.insert(150, "Charlie");
    list.insert(250, "David");
    list.insert(300, "Eve");

    list.print();

    list.updateScore("Charlie", 220);
    list.print();

    list.getTopNPlayers(3);

    list.search(200);

    list.Delete(200);
    list.search(200);

    return 0;
}
